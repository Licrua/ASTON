1. 
 Массивы в JavaScript считаются "неправильными" с точки зрения традиционных структур данных, потому что они совмещают в себе свойства нескольких различных структур данных, не ограничиваясь строго одним определением.
1.1) В классических языках программирования массивы — это структуры фиксированной длины, где элементы хранятся в непрерывном блоке памяти. Доступ к элементу массива выполняется за O(1) благодаря индексам.
1.2) В JavaScript массивы реализованы как динамические хэш-таблицы. Это позволяет добавлять, удалять или изменять элементы в массиве без предварительного определения его длины, но снижает эффективность операций, например, при вставке/удалении.
2. 
if (!Function.prototype.bind) {
  Function.prototype.bind = function (context) {
    // Проверяем, что вызвана функция
    if (typeof this !== "function") {
      throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
    }

    // Сохраняем ссылку на текущую функцию
    var func = this;

    // Сохраняем аргументы, переданные в bind, кроме context
    var args = Array.prototype.slice.call(arguments, 1);

    // Возвращаем новую функцию
    return function () {
      // Соединяем аргументы bind и вызова новой функции
      var finalArgs = args.concat(Array.prototype.slice.call(arguments));
      return func.apply(context, finalArgs);
    };
  };
}

